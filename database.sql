
create table
  public."Playlist" (
    id bigint generated by default as identity not null,
    song_id bigint not null,
    created_at timestamp with time zone not null default now(),
    position real not null,
    constraint Playlist_pkey primary key (id, song_id),
    constraint playlist_song_id_fkey foreign key (song_id) references "Song" (id) on delete cascade
  ) tablespace pg_default;

create table
  public."Song" (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    title text null,
    artist text null,
    duration text null,
    image text null,
    filename text not null,
    constraint songs_pkey primary key (id),
    constraint songs_filename_key unique (filename)
  ) tablespace pg_default;

#drop trigger "playlist_position_trigger" on "Playlist";
#drop function update_playlist_position;

CREATE OR REPLACE function update_playlist_position()
returns trigger
language plpgsql
as $$
begin
  UPDATE "Playlist" SET position = subquery.rn
  FROM  
  (SELECT id,position,row_number() over (ORDER BY position ASC) AS rn
      FROM "Playlist"

  ) subquery
  WHERE "Playlist".id = subquery.id;
  RETURN new;
end;
$$;

Create trigger playlist_position_trigger
after update on "Playlist"
for each statement
WHEN (pg_trigger_depth() < 1)
execute function update_playlist_position();


CREATE OR REPLACE FUNCTION next_song()
RETURNS text AS $$
DECLARE
    song_filename text;
    max_position real;
BEGIN
    -- Get the filename of the song with position = 1
    SELECT s.filename
    INTO song_filename
    FROM "Playlist" p
    JOIN "Song" s ON p.song_id = s.id
    WHERE p.position = 1
    LIMIT 1;  -- Limiting to one row in case there are multiple with position = 1

    -- Get the maximum position in the Playlist
    SELECT COALESCE(MAX(position), 0) INTO max_position
    FROM "Playlist";

    -- Update the position of the song with position = 1
    UPDATE "Playlist"
    SET position = max_position + 1
    WHERE position = 1;

    RETURN song_filename;  -- Return the filename of the updated song
END;
$$ LANGUAGE plpgsql;


CREATE POLICY "Enable read access for all users" on "public"."Song"
AS PERMISSIVE FOR SELECT
TO public
USING (true);


# Set the column privilege to only allow updates to position for ANON users.